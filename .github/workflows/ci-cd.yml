name: Build and Test Spring App

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cachear pacotes Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Executar testes com Maven
        env:
          MP_ACCESS_TOKEN: ${{ secrets.MP_ACCESS_TOKEN }}
          MP_PUBLIC_KEY: ${{ secrets.MP_PUBLIC_KEY }}
          RC_SECRET_KEY: ${{ secrets.RC_SECRET_KEY}}
        run: mvn --batch-mode test -Dspring.profiles.active=test

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cachear pacotes Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Construir projeto com Maven
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        run: mvn clean package -DskipTests

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construir imagem Docker (multi-stage)
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ong-patinhas-app .

      - name: Enviar imagem para o Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ong-patinhas-app

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Atualizar arquivo .env e docker-compose.yml no servidor e executar deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/ong-patinhas/app
      
            echo "Atualizando .env..."
            sudo cat > .env << EOF
            MP_ACCESS_TOKEN=${{ secrets.MP_ACCESS_TOKEN }}
            MP_PUBLIC_KEY=${{ secrets.MP_PUBLIC_KEY }}
            RC_SECRET_KEY=${{ secrets.RC_SECRET_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            LOG_PATH=${{ secrets.LOG_PATH }}
            EOF
      
            echo "Atualizando docker-compose.yml..."
            sudo cat > docker-compose.yml << EOF
            version: '3.8'
            services:
              app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/ong-patinhas-app
                ports:
                  - "8080:8080"
                env_file:
                  - .env
                restart: on-failure:3
                volumes:
                  - ${{ secrets.LOG_PATH }}:/var/log/springboot
                depends_on:
                  - db
                networks:
                  - backend

              db:
                image: mysql:8.0
                restart: always
                environment:
                  MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  MYSQL_DATABASE: ${{ secrets.DATABASE_URL }}
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                networks:
                  - backend

            volumes:
              mysql_data:

            networks:
              backend:
                driver: bridge
            EOF
      
            echo "Executando deploy..."
            sudo ./deploy.sh 

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Criar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
