name: Build and Test Spring App

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

#    services:
#      mysql:
#        image: mysql:8
#        ports:
#          - 3306:3306
#        env:
#          MYSQL_ROOT_PASSWORD: root
#          MYSQL_DATABASE: testdb
#        options: >-
#          --health-cmd="mysqladmin ping -h 127.0.0.1 -proot"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=3

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

#      - name: Esperar o MySQL inicializar
#        run: sleep 90

      - name: Run tests with Maven
#        env:
#          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
#          SPRING_DATASOURCE_USERNAME: root
#          SPRING_DATASOURCE_PASSWORD: root
        run: mvn --batch-mode test -Dspring.profiles.active=test


      - name: Build with Maven
        run: mvn --batch-mode clean package

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build da imagem Docker (multi-stage)
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ong-patinhas-app .
      # Alterada
      - name: Push da imagem para o Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ong-patinhas-app

      - name: Atualizar arquivo .env no servidor e executar deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /root 
            rm .env
            cat > .env << EOF
            MP_ACCESS_TOKEN=${{ secrets.MP_ACCESS_TOKEN }}
            MP_PUBLIC_KEY=${{ secrets.MP_PUBLIC_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            EOF
            ./deploy.sh

